// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package pg

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	//DeleteChatroom
	//
	//  DELETE FROM chatrooms WHERE id = $1
	DeleteChatroom(ctx context.Context, id int64) error
	//DeleteMessage
	//
	//  DELETE FROM messages WHERE id = $1
	DeleteMessage(ctx context.Context, id int64) error
	//DeleteTodo
	//
	//  DELETE FROM todos WHERE id = $1
	DeleteTodo(ctx context.Context, id int64) error
	//DeleteTokensByUserId
	//
	//  DELETE FROM tokens
	//  WHERE tokens.id IN (
	//          SELECT token_id FROM users_tokens WHERE users_tokens.user_id = $1
	//      )
	DeleteTokensByUserId(ctx context.Context, userID pgtype.UUID) error
	//DeleteUser
	//
	//  DELETE FROM users WHERE id = $1
	DeleteUser(ctx context.Context, id pgtype.UUID) error
	//InsertChatroom
	//
	//  INSERT INTO chatrooms (name, creator) VALUES ($1, $2) RETURNING id
	InsertChatroom(ctx context.Context, arg InsertChatroomParams) (int64, error)
	//InsertMessage
	//
	//  INSERT INTO messages (author, message, room_id, created_at) VALUES ($1, $2, $3, $4)
	InsertMessage(ctx context.Context, arg InsertMessageParams) error
	//InsertTodo
	//
	//  INSERT INTO todos (body, username) VALUES ($1, $2) RETURNING id, created_at, body, username
	InsertTodo(ctx context.Context, arg InsertTodoParams) (Todo, error)
	//InsertToken
	//
	//  INSERT INTO tokens (jwt_type, jwt, valid, family) VALUES ($1, $2, $3, $4) RETURNING id
	InsertToken(ctx context.Context, arg InsertTokenParams) (int64, error)
	// table: users
	//
	//  INSERT INTO users ( email, username, encrypted_password, password_created_at)
	//  values ($1, $2, $3, $4)
	//  RETURNING id, email, username
	InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error)
	//InsertUsersTokens
	//
	//  INSERT INTO users_tokens (user_id, token_id) VALUES ($1, $2)
	InsertUsersTokens(ctx context.Context, arg InsertUsersTokensParams) error
	// table: chatrooms
	//
	//  SELECT id, created_at, name, creator FROM chatrooms ORDER BY created_at DESC  LIMIT $1
	SelectChatrooms(ctx context.Context, limit int64) ([]Chatroom, error)
	//SelectEmailOrUsernameAlreadyExists
	//
	//  SELECT email FROM users WHERE users.email = $1 OR users.username = $2
	SelectEmailOrUsernameAlreadyExists(ctx context.Context, arg SelectEmailOrUsernameAlreadyExistsParams) (*string, error)
	// table: messages
	//
	//  SELECT id, created_at, author, message, room_id FROM messages WHERE room_id = $1 ORDER BY created_at DESC LIMIT $2
	SelectMessagesByChatroom(ctx context.Context, arg SelectMessagesByChatroomParams) ([]Message, error)
	//SelectMessagesByUser
	//
	//  SELECT id, created_at, author, message, room_id FROM messages WHERE author = $1 ORDER BY created_at DESC LIMIT $2
	SelectMessagesByUser(ctx context.Context, arg SelectMessagesByUserParams) ([]Message, error)
	// table: todos
	//
	//  SELECT id, created_at, body, username FROM todos WHERE username = $1
	SelectTodosByUsername(ctx context.Context, username string) ([]Todo, error)
	// table: tokens
	//
	//  SELECT id, jwt_type, jwt, valid, family FROM tokens WHERE id = $1
	SelectTokenFromId(ctx context.Context, id int64) (Token, error)
	//SelectTokenFromJwtString
	//
	//  SELECT id, jwt_type, jwt, valid, family FROM tokens WHERE jwt = $1
	SelectTokenFromJwtString(ctx context.Context, jwt string) (Token, error)
	//SelectUserByEmail
	//
	//  SELECT created_at, username, email, encrypted_password, password_created_at, id FROM users WHERE email = $1
	SelectUserByEmail(ctx context.Context, email *string) (User, error)
	//SelectUserByUsername
	//
	//  SELECT created_at, username, email, encrypted_password, password_created_at, id FROM users WHERE username = $1
	SelectUserByUsername(ctx context.Context, username string) (User, error)
	//SelectUserIdFromToken
	//
	//  SELECT user_id FROM users_tokens WHERE token_id = $1 LIMIT 1
	SelectUserIdFromToken(ctx context.Context, tokenID int64) (pgtype.UUID, error)
	// table: users_tokens
	//
	//  SELECT id, user_id, token_id FROM users_tokens WHERE user_id = $1
	SelectUsersTokens(ctx context.Context, userID pgtype.UUID) ([]UsersToken, error)
	//UpdateChatroomName
	//
	//  UPDATE chatrooms SET name = $1 WHERE id = $2 RETURNING id, created_at, name, creator
	UpdateChatroomName(ctx context.Context, arg UpdateChatroomNameParams) (Chatroom, error)
	//UpdateMessage
	//
	//  UPDATE messages SET message = $1 WHERE id = $2 RETURNING id, created_at, author, message, room_id
	UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error)
	//UpdateTodo
	//
	//  UPDATE todos SET body = $1 WHERE id = $2 RETURNING id, created_at, body, username
	UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error)
	//UpdateTokenValid
	//
	//  UPDATE tokens SET valid = $1 WHERE jwt = $2 RETURNING id
	UpdateTokenValid(ctx context.Context, arg UpdateTokenValidParams) (int64, error)
	//UpdateTokensFamilyInvalid
	//
	//  UPDATE tokens SET valid = FALSE WHERE family = $1
	UpdateTokensFamilyInvalid(ctx context.Context, family pgtype.UUID) error
	//UpdateUserTokensToInvalid
	//
	//  UPDATE tokens SET valid = FALSE FROM users_tokens
	//  INNER JOIN tokens AS t ON users_tokens.token_id = t.id
	//      WHERE users_tokens.user_id = $1
	//      AND tokens.id = t.id
	UpdateUserTokensToInvalid(ctx context.Context, userID pgtype.UUID) error
}

var _ Querier = (*Queries)(nil)
