// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const deleteProfile = `-- name: DeleteProfile :exec
DELETE from profiles
where id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const deleteTokensByUserId = `-- name: DeleteTokensByUserId :exec
DELETE FROM tokens
WHERE tokens.id = (
        SELECT token_id
        FROM users_tokens
        WHERE users_tokens.user_id = $1
    )
`

func (q *Queries) DeleteTokensByUserId(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTokensByUserId, userID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const insertProfile = `-- name: InsertProfile :one
INSERT INTO profiles (id)
values ($1)
returning (id)
`

func (q *Queries) InsertProfile(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertProfile, id)
	err := row.Scan(&id)
	return id, err
}

const insertTodo = `-- name: InsertTodo :one
INSERT INTO todos (body, author)
VALUES ($1, $2)
RETURNING id, created_at, body, author
`

type InsertTodoParams struct {
	Body   string
	Author uuid.UUID
}

func (q *Queries) InsertTodo(ctx context.Context, arg InsertTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, insertTodo, arg.Body, arg.Author)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Body,
		&i.Author,
	)
	return i, err
}

const insertToken = `-- name: InsertToken :exec
INSERT INTO tokens (jwt_type, jwt, valid)
VALUES ($1, $2, $3)
`

type InsertTokenParams struct {
	JwtType string
	Jwt     string
	Valid   bool
}

// table: tokens
func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertToken, arg.JwtType, arg.Jwt, arg.Valid)
	return err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
        email,
        username,
        encrypted_password,
        password_created_at
    )
values ($1, $2, $3, $4)
RETURNING id,
    email,
    username
`

type InsertUserParams struct {
	Email             sql.NullString
	Username          string
	EncryptedPassword string
	PasswordCreatedAt time.Time
}

type InsertUserRow struct {
	ID       uuid.UUID
	Email    sql.NullString
	Username string
}

// table: users
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Email,
		arg.Username,
		arg.EncryptedPassword,
		arg.PasswordCreatedAt,
	)
	var i InsertUserRow
	err := row.Scan(&i.ID, &i.Email, &i.Username)
	return i, err
}

const insertUsersTokens = `-- name: InsertUsersTokens :exec
INSERT INTO users_tokens (user_id, token_id)
VALUES ($1, $2)
`

type InsertUsersTokensParams struct {
	UserID  uuid.UUID
	TokenID sql.NullInt64
}

// table: users_tokens
func (q *Queries) InsertUsersTokens(ctx context.Context, arg InsertUsersTokensParams) error {
	_, err := q.db.ExecContext(ctx, insertUsersTokens, arg.UserID, arg.TokenID)
	return err
}

const isValidToken = `-- name: IsValidToken :one
SELECT valid
FROM tokens
WHERE jwt = $1
`

func (q *Queries) IsValidToken(ctx context.Context, jwt string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isValidToken, jwt)
	var valid bool
	err := row.Scan(&valid)
	return valid, err
}

const selectEmailOrUsernameAlreadyExists = `-- name: SelectEmailOrUsernameAlreadyExists :one
SELECT email
FROM users
WHERE users.email = $1
    OR users.username = $2
`

type SelectEmailOrUsernameAlreadyExistsParams struct {
	Email    sql.NullString
	Username string
}

func (q *Queries) SelectEmailOrUsernameAlreadyExists(ctx context.Context, arg SelectEmailOrUsernameAlreadyExistsParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, selectEmailOrUsernameAlreadyExists, arg.Email, arg.Username)
	var email sql.NullString
	err := row.Scan(&email)
	return email, err
}

const selectProfileById = `-- name: SelectProfileById :one
SELECT id, todos
FROM profiles
WHERE profiles.id = $1
`

// table: profiles
func (q *Queries) SelectProfileById(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRowContext(ctx, selectProfileById, id)
	var i Profile
	err := row.Scan(&i.ID, pq.Array(&i.Todos))
	return i, err
}

const selectProfileByUsername = `-- name: SelectProfileByUsername :one
SELECT profiles.id, todos, created_at, username, email, encrypted_password, password_created_at, users.id
FROM profiles
    INNER JOIN users ON profiles.id = users.id
WHERE users.username = $1
`

type SelectProfileByUsernameRow struct {
	ID                uuid.UUID
	Todos             []int64
	CreatedAt         time.Time
	Username          string
	Email             sql.NullString
	EncryptedPassword string
	PasswordCreatedAt time.Time
	ID_2              uuid.UUID
}

func (q *Queries) SelectProfileByUsername(ctx context.Context, username string) (SelectProfileByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, selectProfileByUsername, username)
	var i SelectProfileByUsernameRow
	err := row.Scan(
		&i.ID,
		pq.Array(&i.Todos),
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.EncryptedPassword,
		&i.PasswordCreatedAt,
		&i.ID_2,
	)
	return i, err
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT created_at, username, email, encrypted_password, password_created_at, id
FROM users
WHERE email = $1
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByEmail, email)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.EncryptedPassword,
		&i.PasswordCreatedAt,
		&i.ID,
	)
	return i, err
}

const selectUserByUsername = `-- name: SelectUserByUsername :one
SELECT created_at, username, email, encrypted_password, password_created_at, id
FROM users
WHERE username = $1
`

func (q *Queries) SelectUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByUsername, username)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.EncryptedPassword,
		&i.PasswordCreatedAt,
		&i.ID,
	)
	return i, err
}

const selectUserTodos = `-- name: SelectUserTodos :many
SELECT id, created_at, body, author
FROM todos
WHERE author = $1
`

// table: todos
// insert/select/update to be done
func (q *Queries) SelectUserTodos(ctx context.Context, author uuid.UUID) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, selectUserTodos, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Body,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsersTokens = `-- name: SelectUsersTokens :many
SELECT id, user_id, token_id
FROM users_tokens
WHERE user_id = $1
`

func (q *Queries) SelectUsersTokens(ctx context.Context, userID uuid.UUID) ([]UsersToken, error) {
	rows, err := q.db.QueryContext(ctx, selectUsersTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersToken
	for rows.Next() {
		var i UsersToken
		if err := rows.Scan(&i.ID, &i.UserID, &i.TokenID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET body = $1
WHERE id = $2
RETURNING id, created_at, body, author
`

type UpdateTodoParams struct {
	Body string
	ID   int64
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.Body, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Body,
		&i.Author,
	)
	return i, err
}

const updateTokenValid = `-- name: UpdateTokenValid :exec
UPDATE tokens
SET valid = $1
WHERE jwt = $2
`

type UpdateTokenValidParams struct {
	Valid bool
	Jwt   string
}

func (q *Queries) UpdateTokenValid(ctx context.Context, arg UpdateTokenValidParams) error {
	_, err := q.db.ExecContext(ctx, updateTokenValid, arg.Valid, arg.Jwt)
	return err
}
