// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const deleteChatroom = `-- name: DeleteChatroom :exec
DELETE FROM chatrooms WHERE id = ?
`

// DeleteChatroom
//
//	DELETE FROM chatrooms WHERE id = ?
func (q *Queries) DeleteChatroom(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChatroom, id)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = ?
`

// DeleteMessage
//
//	DELETE FROM messages WHERE id = ?
func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos WHERE id = ?
`

// DeleteTodo
//
//	DELETE FROM todos WHERE id = ?
func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const deleteTokensByUserId = `-- name: DeleteTokensByUserId :exec
DELETE FROM tokens WHERE id IN (
        SELECT token_id FROM users_tokens WHERE user_id = ?
    )
`

// DeleteTokensByUserId
//
//	DELETE FROM tokens WHERE id IN (
//	        SELECT token_id FROM users_tokens WHERE user_id = ?
//	    )
func (q *Queries) DeleteTokensByUserId(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteTokensByUserId, userID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

// DeleteUser
//
//	DELETE FROM users WHERE id = ?
func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const insertChatroom = `-- name: InsertChatroom :one
INSERT INTO chatrooms (name, creator, created_at) VALUES (?, ?, ?) RETURNING id
`

type InsertChatroomParams struct {
	Name      string
	Creator   string
	CreatedAt *time.Time
}

// InsertChatroom
//
//	INSERT INTO chatrooms (name, creator, created_at) VALUES (?, ?, ?) RETURNING id
func (q *Queries) InsertChatroom(ctx context.Context, arg InsertChatroomParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertChatroom, arg.Name, arg.Creator, arg.CreatedAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertMessage = `-- name: InsertMessage :exec
INSERT INTO messages (author, message, color, room_id, created_at) VALUES (?, ?, ?, ?, ?)
`

type InsertMessageParams struct {
	Author    string
	Message   string
	Color     string
	RoomID    int64
	CreatedAt *time.Time
}

// InsertMessage
//
//	INSERT INTO messages (author, message, color, room_id, created_at) VALUES (?, ?, ?, ?, ?)
func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) error {
	_, err := q.db.ExecContext(ctx, insertMessage,
		arg.Author,
		arg.Message,
		arg.Color,
		arg.RoomID,
		arg.CreatedAt,
	)
	return err
}

const insertTodo = `-- name: InsertTodo :one
INSERT INTO todos (body, username, created_at) VALUES (?, ?, ?) RETURNING id, body, username, created_at
`

type InsertTodoParams struct {
	Body      string
	Username  string
	CreatedAt *time.Time
}

// InsertTodo
//
//	INSERT INTO todos (body, username, created_at) VALUES (?, ?, ?) RETURNING id, body, username, created_at
func (q *Queries) InsertTodo(ctx context.Context, arg InsertTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, insertTodo, arg.Body, arg.Username, arg.CreatedAt)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const insertToken = `-- name: InsertToken :one
INSERT INTO tokens (jwt_type, jwt, valid, family) VALUES (?, ?, ?, ?) RETURNING id, jwt_type, jwt, valid, family
`

type InsertTokenParams struct {
	JwtType string
	Jwt     string
	Valid   bool
	Family  string
}

// InsertToken
//
//	INSERT INTO tokens (jwt_type, jwt, valid, family) VALUES (?, ?, ?, ?) RETURNING id, jwt_type, jwt, valid, family
func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, insertToken,
		arg.JwtType,
		arg.Jwt,
		arg.Valid,
		arg.Family,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.JwtType,
		&i.Jwt,
		&i.Valid,
		&i.Family,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (id, email, username, password_salt, encrypted_password, password_created_at)
VALUES (?, ?, ?, ?, ?, ?) RETURNING id, email, username
`

type InsertUserParams struct {
	ID                string
	Email             string
	Username          string
	PasswordSalt      string
	EncryptedPassword string
	PasswordCreatedAt time.Time
}

type InsertUserRow struct {
	ID       string
	Email    string
	Username string
}

// table: users
//
//	INSERT INTO users (id, email, username, password_salt, encrypted_password, password_created_at)
//	VALUES (?, ?, ?, ?, ?, ?) RETURNING id, email, username
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.PasswordSalt,
		arg.EncryptedPassword,
		arg.PasswordCreatedAt,
	)
	var i InsertUserRow
	err := row.Scan(&i.ID, &i.Email, &i.Username)
	return i, err
}

const insertUsersTokens = `-- name: InsertUsersTokens :exec
INSERT INTO users_tokens (user_id, token_id) VALUES (?, ?)
`

type InsertUsersTokensParams struct {
	UserID  string
	TokenID int64
}

// InsertUsersTokens
//
//	INSERT INTO users_tokens (user_id, token_id) VALUES (?, ?)
func (q *Queries) InsertUsersTokens(ctx context.Context, arg InsertUsersTokensParams) error {
	_, err := q.db.ExecContext(ctx, insertUsersTokens, arg.UserID, arg.TokenID)
	return err
}

const selectChatrooms = `-- name: SelectChatrooms :many
SELECT id, name, creator, created_at FROM chatrooms ORDER BY created_at DESC LIMIT ?
`

// table: chatrooms
//
//	SELECT id, name, creator, created_at FROM chatrooms ORDER BY created_at DESC LIMIT ?
func (q *Queries) SelectChatrooms(ctx context.Context, limit int64) ([]Chatroom, error) {
	rows, err := q.db.QueryContext(ctx, selectChatrooms, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chatroom
	for rows.Next() {
		var i Chatroom
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Creator,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectEmailOrUsernameAlreadyExists = `-- name: SelectEmailOrUsernameAlreadyExists :one
SELECT email FROM users WHERE email = ? OR username = ?
`

type SelectEmailOrUsernameAlreadyExistsParams struct {
	Email    string
	Username string
}

// SelectEmailOrUsernameAlreadyExists
//
//	SELECT email FROM users WHERE email = ? OR username = ?
func (q *Queries) SelectEmailOrUsernameAlreadyExists(ctx context.Context, arg SelectEmailOrUsernameAlreadyExistsParams) (string, error) {
	row := q.db.QueryRowContext(ctx, selectEmailOrUsernameAlreadyExists, arg.Email, arg.Username)
	var email string
	err := row.Scan(&email)
	return email, err
}

const selectMessagesByChatroom = `-- name: SelectMessagesByChatroom :many
SELECT id, author, message, color, room_id, created_at FROM messages WHERE room_id = ? ORDER BY created_at DESC LIMIT ?
`

type SelectMessagesByChatroomParams struct {
	RoomID int64
	Limit  int64
}

// table: messages
//
//	SELECT id, author, message, color, room_id, created_at FROM messages WHERE room_id = ? ORDER BY created_at DESC LIMIT ?
func (q *Queries) SelectMessagesByChatroom(ctx context.Context, arg SelectMessagesByChatroomParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, selectMessagesByChatroom, arg.RoomID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Message,
			&i.Color,
			&i.RoomID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectMessagesByUser = `-- name: SelectMessagesByUser :many
SELECT id, author, message, color, room_id, created_at FROM messages WHERE author = ? ORDER BY created_at DESC LIMIT ?
`

type SelectMessagesByUserParams struct {
	Author string
	Limit  int64
}

// SelectMessagesByUser
//
//	SELECT id, author, message, color, room_id, created_at FROM messages WHERE author = ? ORDER BY created_at DESC LIMIT ?
func (q *Queries) SelectMessagesByUser(ctx context.Context, arg SelectMessagesByUserParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, selectMessagesByUser, arg.Author, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Message,
			&i.Color,
			&i.RoomID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTodosByUsername = `-- name: SelectTodosByUsername :many
SELECT id, body, username, created_at FROM todos WHERE username = ?
`

// table: todos
//
//	SELECT id, body, username, created_at FROM todos WHERE username = ?
func (q *Queries) SelectTodosByUsername(ctx context.Context, username string) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, selectTodosByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.Username,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTokenFromId = `-- name: SelectTokenFromId :one
SELECT id, jwt_type, jwt, valid, family FROM tokens WHERE id = ?
`

// table: tokens
//
//	SELECT id, jwt_type, jwt, valid, family FROM tokens WHERE id = ?
func (q *Queries) SelectTokenFromId(ctx context.Context, id int64) (Token, error) {
	row := q.db.QueryRowContext(ctx, selectTokenFromId, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.JwtType,
		&i.Jwt,
		&i.Valid,
		&i.Family,
	)
	return i, err
}

const selectTokenFromJwtString = `-- name: SelectTokenFromJwtString :one
SELECT id, jwt_type, jwt, valid, family FROM tokens WHERE jwt = ?
`

// SelectTokenFromJwtString
//
//	SELECT id, jwt_type, jwt, valid, family FROM tokens WHERE jwt = ?
func (q *Queries) SelectTokenFromJwtString(ctx context.Context, jwt string) (Token, error) {
	row := q.db.QueryRowContext(ctx, selectTokenFromJwtString, jwt)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.JwtType,
		&i.Jwt,
		&i.Valid,
		&i.Family,
	)
	return i, err
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT id, email, username, password_salt, encrypted_password, password_created_at FROM users WHERE email = ?
`

// SelectUserByEmail
//
//	SELECT id, email, username, password_salt, encrypted_password, password_created_at FROM users WHERE email = ?
func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordSalt,
		&i.EncryptedPassword,
		&i.PasswordCreatedAt,
	)
	return i, err
}

const selectUserByUsername = `-- name: SelectUserByUsername :one
SELECT id, email, username, password_salt, encrypted_password, password_created_at FROM users WHERE username = ?
`

// SelectUserByUsername
//
//	SELECT id, email, username, password_salt, encrypted_password, password_created_at FROM users WHERE username = ?
func (q *Queries) SelectUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordSalt,
		&i.EncryptedPassword,
		&i.PasswordCreatedAt,
	)
	return i, err
}

const selectUserIdFromToken = `-- name: SelectUserIdFromToken :one
SELECT user_id FROM users_tokens WHERE token_id = ? LIMIT 1
`

// SelectUserIdFromToken
//
//	SELECT user_id FROM users_tokens WHERE token_id = ? LIMIT 1
func (q *Queries) SelectUserIdFromToken(ctx context.Context, tokenID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, selectUserIdFromToken, tokenID)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const selectUsersTokens = `-- name: SelectUsersTokens :many
SELECT user_id, token_id FROM users_tokens WHERE user_id = ?
`

// table: users_tokens
//
//	SELECT user_id, token_id FROM users_tokens WHERE user_id = ?
func (q *Queries) SelectUsersTokens(ctx context.Context, userID string) ([]UsersToken, error) {
	rows, err := q.db.QueryContext(ctx, selectUsersTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersToken
	for rows.Next() {
		var i UsersToken
		if err := rows.Scan(&i.UserID, &i.TokenID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatroomName = `-- name: UpdateChatroomName :one
UPDATE chatrooms SET name = ? WHERE id = ? RETURNING id, name, creator, created_at
`

type UpdateChatroomNameParams struct {
	Name string
	ID   int64
}

// UpdateChatroomName
//
//	UPDATE chatrooms SET name = ? WHERE id = ? RETURNING id, name, creator, created_at
func (q *Queries) UpdateChatroomName(ctx context.Context, arg UpdateChatroomNameParams) (Chatroom, error) {
	row := q.db.QueryRowContext(ctx, updateChatroomName, arg.Name, arg.ID)
	var i Chatroom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Creator,
		&i.CreatedAt,
	)
	return i, err
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages SET message = ? WHERE id = ? RETURNING id, author, message, color, room_id, created_at
`

type UpdateMessageParams struct {
	Message string
	ID      int64
}

// UpdateMessage
//
//	UPDATE messages SET message = ? WHERE id = ? RETURNING id, author, message, color, room_id, created_at
func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, updateMessage, arg.Message, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Message,
		&i.Color,
		&i.RoomID,
		&i.CreatedAt,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos SET body = ? WHERE id = ? RETURNING id, body, username, created_at
`

type UpdateTodoParams struct {
	Body string
	ID   int64
}

// UpdateTodo
//
//	UPDATE todos SET body = ? WHERE id = ? RETURNING id, body, username, created_at
func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.Body, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const updateTokenValid = `-- name: UpdateTokenValid :one
UPDATE tokens SET valid = ? WHERE jwt = ? RETURNING id
`

type UpdateTokenValidParams struct {
	Valid bool
	Jwt   string
}

// UpdateTokenValid
//
//	UPDATE tokens SET valid = ? WHERE jwt = ? RETURNING id
func (q *Queries) UpdateTokenValid(ctx context.Context, arg UpdateTokenValidParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateTokenValid, arg.Valid, arg.Jwt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateTokensFamilyInvalid = `-- name: UpdateTokensFamilyInvalid :exec
UPDATE tokens SET valid = FALSE WHERE family = ?
`

// UpdateTokensFamilyInvalid
//
//	UPDATE tokens SET valid = FALSE WHERE family = ?
func (q *Queries) UpdateTokensFamilyInvalid(ctx context.Context, family string) error {
	_, err := q.db.ExecContext(ctx, updateTokensFamilyInvalid, family)
	return err
}

const updateUserTokensToInvalid = `-- name: UpdateUserTokensToInvalid :exec
UPDATE tokens SET valid = FALSE WHERE id IN (
        SELECT token_id FROM users_tokens WHERE user_id = ?
    )
`

// UpdateUserTokensToInvalid
//
//	UPDATE tokens SET valid = FALSE WHERE id IN (
//	        SELECT token_id FROM users_tokens WHERE user_id = ?
//	    )
func (q *Queries) UpdateUserTokensToInvalid(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, updateUserTokensToInvalid, userID)
	return err
}
