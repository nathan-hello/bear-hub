// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const insertTodo = `-- name: InsertTodo :one
INSERT INTO todos (body)
values ($1)
RETURNING id, created_at, body
`

func (q *Queries) InsertTodo(ctx context.Context, body string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, insertTodo, body)
	var i Todo
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Body)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
        email,
        username,
        encrypted_password,
        password_created_at
    )
values ($1, $2, $3, $4)
RETURNING email,
    username
`

type InsertUserParams struct {
	Email             sql.NullString
	Username          string
	EncryptedPassword string
	PasswordCreatedAt time.Time
}

type InsertUserRow struct {
	Email    sql.NullString
	Username string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Email,
		arg.Username,
		arg.EncryptedPassword,
		arg.PasswordCreatedAt,
	)
	var i InsertUserRow
	err := row.Scan(&i.Email, &i.Username)
	return i, err
}

const selectEmailOrUsernameAlreadyExists = `-- name: SelectEmailOrUsernameAlreadyExists :one
SELECT email
FROM users
WHERE users.email = $1
    OR users.username = $2
`

type SelectEmailOrUsernameAlreadyExistsParams struct {
	Email    sql.NullString
	Username string
}

func (q *Queries) SelectEmailOrUsernameAlreadyExists(ctx context.Context, arg SelectEmailOrUsernameAlreadyExistsParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, selectEmailOrUsernameAlreadyExists, arg.Email, arg.Username)
	var email sql.NullString
	err := row.Scan(&email)
	return email, err
}

const selectProfileById = `-- name: SelectProfileById :one
SELECT username, todos, id
FROM profiles
WHERE profiles.id = $1
`

func (q *Queries) SelectProfileById(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRowContext(ctx, selectProfileById, id)
	var i Profile
	err := row.Scan(&i.Username, &i.Todos, &i.ID)
	return i, err
}

const selectTodos = `-- name: SelectTodos :many
SELECT id, created_at, body
FROM todos
LIMIT $1
`

func (q *Queries) SelectTodos(ctx context.Context, limit int64) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, selectTodos, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Body); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT created_at, username, email, encrypted_password, password_created_at, id
FROM users
WHERE email = $1
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByEmail, email)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.EncryptedPassword,
		&i.PasswordCreatedAt,
		&i.ID,
	)
	return i, err
}

const selectUserByUsername = `-- name: SelectUserByUsername :one
SELECT created_at, username, email, encrypted_password, password_created_at, id
FROM users
WHERE username = $1
`

func (q *Queries) SelectUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByUsername, username)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.EncryptedPassword,
		&i.PasswordCreatedAt,
		&i.ID,
	)
	return i, err
}
